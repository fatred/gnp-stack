log: true

inputs:
  nats-states-input:
    # required string, type of input
    type: jetstream

    # optional string, input instance name
    # defaults to a generated name if empty
    name: gnmic-emitter-states

    # string, NATS server address
    # default: "localhost:4222"
    address: nats:4222

    # string, name of the JetStream stream to consume from
    stream: states-stream

    # list of subject filters within the stream to consume from
    subjects:
      - telemetry.device.*

    # enum string, format of consumed message: "event" or "proto"
    # default: "event"
    format: event

    # enum string, delivery policy for JetStream:
    # one of: all, last, new, last-per-subject
    # default: all
    deliver-policy: new

    # optional string, subject format used to extract metadata
    # one of: static, subscription.target, target.subscription
    # affects proto messages only
    subject-format: target.subscription

    # optional string, NATS username
    # username: nats-user

    # optional string, NATS password
    # password: secret

    # optional duration, reconnect wait time
    # default: 2s
    connect-time-wait: 3s

    # optional bool, enables debug logging
    debug: false

    # integer, number of workers to start (parallel consumers)
    # default: 1
    num-workers: 1

    # integer, internal per-worker buffer size
    # default: 500
    buffer-size: 1000

    # integer, batch size when fetching messages from JetStream
    # default: 500
    fetch-batch-size: 500

    # optional list of output names this input writes to
    # outputs must be configured at the root `outputs:` section
    outputs:
      - prom-write

    # optional list of event processors
    # only applies when format is "event"
    # event-processors:
      # - add-tags

  nats-counters-input:
    # required string, type of input
    type: jetstream

    # optional string, input instance name
    # defaults to a generated name if empty
    name: gnmic-emitter-counters

    # string, NATS server address
    # default: "localhost:4222"
    address: nats:4222

    # string, name of the JetStream stream to consume from
    stream: counters-stream

    # list of subject filters within the stream to consume from
    subjects:
      - telemetry.device.*

    # enum string, format of consumed message: "event" or "proto"
    # default: "event"
    format: event

    # enum string, delivery policy for JetStream:
    # one of: all, last, new, last-per-subject
    # default: all
    deliver-policy: new

    # optional string, subject format used to extract metadata
    # one of: static, subscription.target, target.subscription
    # affects proto messages only
    subject-format: subscription.target

    # optional string, NATS username
    # username: nats-user

    # optional string, NATS password
    # password: secret

    # optional duration, reconnect wait time
    # default: 2s
    connect-time-wait: 3s

    # optional bool, enables debug logging
    debug: false

    # integer, number of workers to start (parallel consumers)
    # default: 1
    num-workers: 1

    # integer, internal per-worker buffer size
    # default: 500
    buffer-size: 1000

    # integer, batch size when fetching messages from JetStream
    # default: 500
    fetch-batch-size: 500

    # optional list of output names this input writes to
    # outputs must be configured at the root `outputs:` section
    outputs:
      - prom-write

    # optional list of event processors
    # only applies when format is "event"
    # event-processors:
      # - add-tags


outputs:
  prom-write:
    type: prometheus_write

    # url to push metrics towards, scheme is required
    url: http://prometheus:9009/api/v1/push
    
    # a map of string:string, 
    # custom HTTP headers to be sent along with each remote write request.
    # headers:
      # header: value
    
    # sets the `Authorization` header on every remote write request with the
    # configured username and password.
    # authentication:
      # username:
      # password:
    
    # sets the `Authorization` header with type `.authorization.type` and the token value.
    # authorization:
      # type: Bearer
      # credentials: <token string>
    
    # tls config
    # tls:
      # string, path to the CA certificate file,
      # this will be used to verify the clients certificates when `skip-verify` is false
      # ca-file:
      # string, client certificate file.
      # cert-file:
      # string, client key file.
      # key-file:
      # boolean, if true, the client will not verify the server
      # certificate against the available certificate chain.
      # skip-verify: false
    
    # duration, defaults to 10s, time interval between write requests
    interval: 10s
    
    # Buffer size for time series to be sent to the remote system.
    # metrics are sent to the remote system every `.interval` or when the buffer is full. Whichever one is reached first.
    # integer, defaults to 1000.
    buffer-size: 1000
    
    # integer, defaults to 500, sets the maximum number of timeSeries per write request to remote.
    max-time-series-per-write: 500
    
    # boolean, enables setting string type values as prometheus metric labels.
    strings-as-labels: true
    
    # Push request timeout.
    # duration, defaults to 10s
    timeout: 10s
    
    # list of processors to apply on the message before writing
    event-processors: []
    
    # an integer, sets the number of worker handling messages to be converted into Prometheus metrics
    num-workers: 1
    
    # an integer, sets the number of writers draining the buffer and writing to Prometheus
    num-writers: 1